openapi: 3.0.3
info:
  title: SKA Music API
  description: |
    음악 신청 플랫폼 API - Supabase PostgREST 기반

    ## 인증
    모든 API 요청에는 `apikey` 헤더가 필요합니다.

    ## Base URL
    `https://xkleobfxezajedtnbcqf.supabase.co/rest/v1`

    ## 주요 기능
    - 교수 계정 관리 (관리자)
    - 수업 플레이리스트 생성 및 관리
    - 학생 음악 신청 및 상태 관리
    - CASCADE DELETE: 교수 삭제 시 관련 수업 및 신청곡 자동 삭제

    ## 데이터 관계
    ```
    professors (교수)
    └── playlists (수업) [CASCADE DELETE]
        └── song_requests (신청곡) [CASCADE DELETE]
    ```

  version: 2.0.0
  contact:
    name: SKA Music Support

servers:
  - url: https://xkleobfxezajedtnbcqf.supabase.co/rest/v1
    description: Production Server

security:
  - ApiKeyAuth: []

tags:
  - name: Professors
    description: 교수 계정 관리 (관리자 전용)
  - name: Playlists
    description: 수업 플레이리스트 관리 (교수)
  - name: Song Requests
    description: 음악 신청 관리 (학생/교수)

paths:
  /professors:
    get:
      tags:
        - Professors
      summary: 교수 목록 조회
      description: |
        모든 교수 정보를 조회합니다.

        **필터 예시:**
        - 이름으로 검색: `?name=eq.김교수`
        - 코드로 검색: `?professor_code=eq.A1B2C`
      parameters:
        - $ref: '#/components/parameters/Select'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'
              examples:
                success:
                  value:
                    - id: "123e4567-e89b-12d3-a456-426614174000"
                      professor_code: "A1B2C"
                      name: "김교수"
                      created_at: "2024-10-24T12:00:00Z"
    post:
      tags:
        - Professors
      summary: 교수 생성 (관리자)
      description: |
        새로운 교수 계정을 생성합니다.

        **참고:** 5자리 영문+숫자 고유번호를 생성해야 합니다.
      parameters:
        - $ref: '#/components/parameters/PreferReturn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - professor_code
                - name
              properties:
                professor_code:
                  type: string
                  minLength: 5
                  maxLength: 5
                  pattern: '^[A-Z0-9]{5}$'
                  example: "A1B2C"
                  description: "5자리 영문 대문자 + 숫자 조합"
                name:
                  type: string
                  minLength: 1
                  example: "김교수"
      responses:
        '201':
          description: 생성 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '409':
          description: 중복된 교수 코드
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /professors?professor_code=eq.{code}:
    get:
      tags:
        - Professors
      summary: 교수 코드로 조회
      description: |
        교수 고유번호로 특정 교수 정보를 조회합니다.
        교수 로그인 시 사용됩니다.
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Z0-9]{5}$'
          example: "A1B2C"
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'

  /professors?id=eq.{id}:
    delete:
      tags:
        - Professors
      summary: 교수 삭제 (관리자)
      description: |
        교수를 삭제합니다.

        **⚠️ CASCADE DELETE:**
        - 해당 교수의 모든 플레이리스트 자동 삭제
        - 관련된 모든 신청곡도 자동 삭제
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 삭제 완료
        '404':
          description: 교수를 찾을 수 없음

  /playlists:
    get:
      tags:
        - Playlists
      summary: 플레이리스트 목록 조회
      description: |
        플레이리스트를 조회합니다.

        **필터 예시:**
        - 특정 교수: `?professor_id=eq.{uuid}`
        - 활성 상태만: `?is_active=eq.true`
        - 정렬: `?order=created_at.desc`
      parameters:
        - $ref: '#/components/parameters/Select'
        - $ref: '#/components/parameters/Order'
        - name: professor_id
          in: query
          description: 교수 ID로 필터링
          schema:
            type: string
            example: "eq.123e4567-e89b-12d3-a456-426614174000"
        - name: is_active
          in: query
          description: 활성 상태로 필터링
          schema:
            type: string
            enum: ['eq.true', 'eq.false']
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
              examples:
                success:
                  value:
                    - id: "456e7890-e89b-12d3-a456-426614174001"
                      professor_id: "123e4567-e89b-12d3-a456-426614174000"
                      class_name: "컴퓨터공학개론"
                      playlist_code: "789e0123-e89b-12d3-a456-426614174002"
                      is_active: true
                      created_at: "2024-10-24T13:00:00Z"
                      updated_at: "2024-10-24T13:00:00Z"
    post:
      tags:
        - Playlists
      summary: 플레이리스트 생성 (교수)
      description: |
        새로운 수업 플레이리스트를 생성합니다.
        `playlist_code`는 UUID로 자동 생성됩니다.
      parameters:
        - $ref: '#/components/parameters/PreferReturn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - professor_id
                - class_name
              properties:
                professor_id:
                  type: string
                  format: uuid
                  description: "교수 ID"
                class_name:
                  type: string
                  minLength: 1
                  example: "데이터베이스 시스템"
                  description: "수업명"
                is_active:
                  type: boolean
                  default: true
                  description: "활성 상태"
      responses:
        '201':
          description: 생성 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'

  /playlists?id=eq.{id}:
    patch:
      tags:
        - Playlists
      summary: 플레이리스트 수정 (교수)
      description: 플레이리스트 정보를 수정합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PreferReturn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                class_name:
                  type: string
                is_active:
                  type: boolean
      responses:
        '200':
          description: 수정 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
    delete:
      tags:
        - Playlists
      summary: 플레이리스트 삭제 (교수)
      description: |
        플레이리스트를 삭제합니다.

        **⚠️ CASCADE DELETE:**
        - 해당 플레이리스트의 모든 신청곡 자동 삭제
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 삭제 완료

  /playlists?playlist_code=eq.{code}:
    get:
      tags:
        - Playlists
      summary: 플레이리스트 코드로 조회
      description: |
        플레이리스트 코드(UUID)로 정보를 조회합니다.
        학생이 QR 코드를 통해 접근할 때 사용됩니다.
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/Select'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'

  /song_requests:
    get:
      tags:
        - Song Requests
      summary: 음악 신청 목록 조회
      description: |
        음악 신청 목록을 조회합니다.

        **필터 예시:**
        - 특정 플레이리스트: `?playlist_id=eq.{uuid}`
        - 대기 중인 신청: `?status=eq.pending`
        - 승인된 신청: `?status=eq.accepted`
        - 정렬: `?order=display_order.asc` 또는 `?order=requested_at.desc`
      parameters:
        - $ref: '#/components/parameters/Select'
        - $ref: '#/components/parameters/Order'
        - name: playlist_id
          in: query
          description: 플레이리스트 ID로 필터링
          schema:
            type: string
            example: "eq.456e7890-e89b-12d3-a456-426614174001"
        - name: status
          in: query
          description: 상태로 필터링
          schema:
            type: string
            enum: ['eq.pending', 'eq.accepted', 'eq.rejected']
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SongRequest'
              examples:
                success:
                  value:
                    - id: "abc12345-e89b-12d3-a456-426614174003"
                      playlist_id: "456e7890-e89b-12d3-a456-426614174001"
                      requester_name: "홍길동"
                      song_title: "Shape of You"
                      message: "좋아하는 노래입니다!"
                      youtube_url: "https://www.youtube.com/watch?v=JGwWNGJdvx8"
                      status: "pending"
                      requested_at: "2024-10-24T14:00:00Z"
                      processed_at: null
                      display_order: null
    post:
      tags:
        - Song Requests
      summary: 음악 신청 (학생)
      description: |
        새로운 음악을 신청합니다.

        **참고:**
        - `status`는 기본적으로 'pending'으로 설정됩니다.
        - 교수가 승인/거절할 수 있습니다.
      parameters:
        - $ref: '#/components/parameters/PreferReturn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - playlist_id
                - requester_name
                - song_title
                - youtube_url
              properties:
                playlist_id:
                  type: string
                  format: uuid
                  description: "플레이리스트 ID"
                requester_name:
                  type: string
                  minLength: 1
                  example: "홍길동"
                  description: "신청자 이름"
                song_title:
                  type: string
                  minLength: 1
                  example: "Shape of You"
                  description: "노래 제목"
                message:
                  type: string
                  example: "좋아하는 노래입니다!"
                  description: "신청 메시지 (선택)"
                youtube_url:
                  type: string
                  format: uri
                  example: "https://www.youtube.com/watch?v=JGwWNGJdvx8"
                  description: "유튜브 URL"
      responses:
        '201':
          description: 신청 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongRequest'

  /song_requests?id=eq.{id}:
    patch:
      tags:
        - Song Requests
      summary: 음악 신청 상태 변경 (교수)
      description: |
        음악 신청의 상태를 변경합니다 (승인/거절).

        **상태:**
        - `pending`: 대기 중
        - `accepted`: 승인됨
        - `rejected`: 거절됨

        **display_order:**
        - 승인된 곡의 재생 순서를 지정할 수 있습니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PreferReturn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, accepted, rejected]
                processed_at:
                  type: string
                  format: date-time
                  description: "처리 시간 (ISO 8601)"
                display_order:
                  type: integer
                  description: "재생 순서"
            examples:
              accept:
                summary: 신청 승인
                value:
                  status: "accepted"
                  processed_at: "2024-10-24T15:00:00Z"
                  display_order: 1
              reject:
                summary: 신청 거절
                value:
                  status: "rejected"
                  processed_at: "2024-10-24T15:00:00Z"
      responses:
        '200':
          description: 수정 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongRequest'
    delete:
      tags:
        - Song Requests
      summary: 음악 신청 삭제
      description: 음악 신청을 삭제합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 삭제 완료

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
      description: |
        Supabase anon key

        **예시:**
        ```
        apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        ```

  parameters:
    Select:
      name: select
      in: query
      description: |
        조회할 컬럼 지정

        **예시:**
        - 모든 컬럼: `*`
        - 특정 컬럼: `id,name,created_at`
        - 관계 포함: `*,professors(*)`
      schema:
        type: string
        default: "*"
    Order:
      name: order
      in: query
      description: |
        정렬 기준

        **예시:**
        - 최신순: `created_at.desc`
        - 오래된순: `created_at.asc`
        - 이름순: `name.asc`
      schema:
        type: string
        example: "created_at.desc"
    Limit:
      name: limit
      in: query
      description: 조회할 최대 개수
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 100
    Offset:
      name: offset
      in: query
      description: 건너뛸 개수 (페이지네이션)
      schema:
        type: integer
        minimum: 0
        default: 0
    PreferReturn:
      name: Prefer
      in: header
      description: |
        응답 형식 지정

        **값:**
        - `return=representation`: 생성/수정된 데이터 반환
        - `return=minimal`: 최소한의 응답
      schema:
        type: string
        default: "return=representation"

  schemas:
    Professor:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "교수 ID (자동 생성)"
          example: "123e4567-e89b-12d3-a456-426614174000"
        professor_code:
          type: string
          pattern: '^[A-Z0-9]{5}$'
          description: "교수 고유번호 (5자리, 고유)"
          example: "A1B2C"
        name:
          type: string
          description: "교수 이름"
          example: "김교수"
        created_at:
          type: string
          format: date-time
          description: "생성 시간"
          example: "2024-10-24T12:00:00Z"
      required:
        - professor_code
        - name

    Playlist:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "플레이리스트 ID (자동 생성)"
          example: "456e7890-e89b-12d3-a456-426614174001"
        professor_id:
          type: string
          format: uuid
          description: "교수 ID (외래 키)"
          example: "123e4567-e89b-12d3-a456-426614174000"
        class_name:
          type: string
          description: "수업 이름"
          example: "컴퓨터공학개론"
        playlist_code:
          type: string
          format: uuid
          description: "플레이리스트 코드 (자동 생성, 고유)"
          example: "789e0123-e89b-12d3-a456-426614174002"
        is_active:
          type: boolean
          description: "활성 상태"
          default: true
        created_at:
          type: string
          format: date-time
          description: "생성 시간"
          example: "2024-10-24T13:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: "수정 시간"
          example: "2024-10-24T13:00:00Z"
      required:
        - professor_id
        - class_name

    SongRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "신청 ID (자동 생성)"
          example: "abc12345-e89b-12d3-a456-426614174003"
        playlist_id:
          type: string
          format: uuid
          description: "플레이리스트 ID (외래 키)"
          example: "456e7890-e89b-12d3-a456-426614174001"
        requester_name:
          type: string
          description: "신청자 이름"
          example: "홍길동"
        song_title:
          type: string
          description: "노래 제목"
          example: "Shape of You"
        message:
          type: string
          nullable: true
          description: "신청 메시지"
          example: "좋아하는 노래입니다!"
        youtube_url:
          type: string
          format: uri
          description: "유튜브 URL"
          example: "https://www.youtube.com/watch?v=JGwWNGJdvx8"
        status:
          type: string
          enum: [pending, accepted, rejected]
          description: "신청 상태"
          default: "pending"
        requested_at:
          type: string
          format: date-time
          description: "신청 시간"
          example: "2024-10-24T14:00:00Z"
        processed_at:
          type: string
          format: date-time
          nullable: true
          description: "처리 시간"
          example: "2024-10-24T15:00:00Z"
        display_order:
          type: integer
          nullable: true
          description: "표시/재생 순서"
          example: 1
      required:
        - playlist_id
        - requester_name
        - song_title
        - youtube_url

    Error:
      type: object
      properties:
        code:
          type: string
          description: "에러 코드"
          example: "23505"
        message:
          type: string
          description: "에러 메시지"
          example: "duplicate key value violates unique constraint"
        details:
          type: string
          description: "상세 정보"
        hint:
          type: string
          description: "해결 힌트"
