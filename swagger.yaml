openapi: 3.0.3
info:
  title: SKA Music API
  description: |
    음악 신청 플랫폼 API - Supabase PostgREST 기반

    ## 인증
    모든 API 요청에는 `apikey` 헤더가 필요합니다.

    ## Base URL
    `https://xkleobfxezajedtnbcqf.supabase.co/rest/v1`
  version: 1.0.0
  contact:
    name: SKA Music Support
servers:
  - url: https://xkleobfxezajedtnbcqf.supabase.co/rest/v1
    description: Production Server

security:
  - ApiKeyAuth: []

tags:
  - name: Professors
    description: 교수 관리
  - name: Playlists
    description: 플레이리스트 관리
  - name: Song Requests
    description: 음악 신청 관리

paths:
  /professors:
    get:
      tags:
        - Professors
      summary: 교수 목록 조회
      description: 모든 교수 정보를 조회합니다.
      parameters:
        - $ref: '#/components/parameters/Select'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Prefer'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'
    post:
      tags:
        - Professors
      summary: 교수 생성
      description: 새로운 교수를 생성합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - professor_code
                - name
              properties:
                professor_code:
                  type: string
                  example: "PROF001"
                name:
                  type: string
                  example: "김교수"
      responses:
        '201':
          description: 생성 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'

  /professors?professor_code=eq.{code}:
    get:
      tags:
        - Professors
      summary: 교수 코드로 조회
      description: 특정 교수 코드로 교수 정보를 조회합니다.
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          example: "PROF001"
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'

  /playlists:
    get:
      tags:
        - Playlists
      summary: 플레이리스트 목록 조회
      description: 모든 플레이리스트를 조회합니다.
      parameters:
        - $ref: '#/components/parameters/Select'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Range'
        - name: professor_id
          in: query
          description: 교수 ID로 필터링
          schema:
            type: string
            format: uuid
        - name: is_active
          in: query
          description: 활성 상태로 필터링
          schema:
            type: string
            enum: ['eq.true', 'eq.false']
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
    post:
      tags:
        - Playlists
      summary: 플레이리스트 생성
      description: 새로운 플레이리스트를 생성합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - professor_id
                - class_name
              properties:
                professor_id:
                  type: string
                  format: uuid
                class_name:
                  type: string
                  example: "컴퓨터공학개론"
                is_active:
                  type: boolean
                  default: true
      responses:
        '201':
          description: 생성 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'

  /playlists?id=eq.{id}:
    patch:
      tags:
        - Playlists
      summary: 플레이리스트 수정
      description: 플레이리스트 정보를 수정합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                class_name:
                  type: string
                is_active:
                  type: boolean
      responses:
        '200':
          description: 수정 완료
    delete:
      tags:
        - Playlists
      summary: 플레이리스트 삭제
      description: 플레이리스트를 삭제합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 삭제 완료

  /playlists?playlist_code=eq.{code}:
    get:
      tags:
        - Playlists
      summary: 플레이리스트 코드로 조회
      description: 플레이리스트 코드로 정보를 조회합니다.
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/Select'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'

  /song_requests:
    get:
      tags:
        - Song Requests
      summary: 음악 신청 목록 조회
      description: 모든 음악 신청을 조회합니다.
      parameters:
        - $ref: '#/components/parameters/Select'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Range'
        - name: playlist_id
          in: query
          description: 플레이리스트 ID로 필터링
          schema:
            type: string
            example: "eq.{uuid}"
        - name: status
          in: query
          description: 상태로 필터링
          schema:
            type: string
            enum: ['eq.pending', 'eq.accepted', 'eq.rejected']
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SongRequest'
    post:
      tags:
        - Song Requests
      summary: 음악 신청
      description: 새로운 음악을 신청합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - playlist_id
                - requester_name
                - song_title
                - youtube_url
              properties:
                playlist_id:
                  type: string
                  format: uuid
                requester_name:
                  type: string
                  example: "홍길동"
                song_title:
                  type: string
                  example: "Shape of You"
                message:
                  type: string
                  example: "좋아하는 노래입니다!"
                youtube_url:
                  type: string
                  example: "https://www.youtube.com/watch?v=JGwWNGJdvx8"
      responses:
        '201':
          description: 신청 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongRequest'

  /song_requests?id=eq.{id}:
    patch:
      tags:
        - Song Requests
      summary: 음악 신청 상태 변경
      description: 음악 신청의 상태를 변경합니다 (승인/거절).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, accepted, rejected]
                processed_at:
                  type: string
                  format: date-time
                display_order:
                  type: integer
      responses:
        '200':
          description: 수정 완료
    delete:
      tags:
        - Song Requests
      summary: 음악 신청 삭제
      description: 음악 신청을 삭제합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 삭제 완료

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
      description: Supabase anon key

  parameters:
    Select:
      name: select
      in: query
      description: 조회할 컬럼 지정 (예. id,name 또는 *)
      schema:
        type: string
        default: "*"
    Order:
      name: order
      in: query
      description: 정렬 기준 (예. created_at.desc)
      schema:
        type: string
    Range:
      name: Range
      in: header
      description: 페이지네이션 범위 (예. 0-9)
      schema:
        type: string
    Prefer:
      name: Prefer
      in: header
      description: 응답 형식 (예. return=representation)
      schema:
        type: string

  schemas:
    Professor:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 교수 ID (자동 생성)
        professor_code:
          type: string
          description: 교수 코드 (고유)
          example: "PROF001"
        name:
          type: string
          description: 교수 이름
          example: "김교수"
        created_at:
          type: string
          format: date-time
          description: 생성 시간
      required:
        - professor_code
        - name

    Playlist:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 플레이리스트 ID (자동 생성)
        professor_id:
          type: string
          format: uuid
          description: 교수 ID
        class_name:
          type: string
          description: 수업 이름
          example: "컴퓨터공학개론"
        playlist_code:
          type: string
          format: uuid
          description: 플레이리스트 코드 (자동 생성, 고유)
        is_active:
          type: boolean
          description: 활성 상태
          default: true
        created_at:
          type: string
          format: date-time
          description: 생성 시간
        updated_at:
          type: string
          format: date-time
          description: 수정 시간
      required:
        - professor_id
        - class_name

    SongRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 신청 ID (자동 생성)
        playlist_id:
          type: string
          format: uuid
          description: 플레이리스트 ID
        requester_name:
          type: string
          description: 신청자 이름
          example: "홍길동"
        song_title:
          type: string
          description: 노래 제목
          example: "Shape of You"
        message:
          type: string
          description: 신청 메시지
          example: "좋아하는 노래입니다!"
        youtube_url:
          type: string
          description: 유튜브 URL
          example: "https://www.youtube.com/watch?v=JGwWNGJdvx8"
        status:
          type: string
          enum: [pending, accepted, rejected]
          description: 신청 상태
          default: pending
        requested_at:
          type: string
          format: date-time
          description: 신청 시간
        processed_at:
          type: string
          format: date-time
          nullable: true
          description: 처리 시간
        display_order:
          type: integer
          nullable: true
          description: 표시 순서
      required:
        - playlist_id
        - requester_name
        - song_title
        - youtube_url

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
        hint:
          type: string
