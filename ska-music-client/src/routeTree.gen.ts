/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PlaylistCodeRouteImport } from './routes/$playlistCode'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProfessorIndexRouteImport } from './routes/professor/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as ProfessorPlaylistIdRouteImport } from './routes/professor/$playlistId'

const PlaylistCodeRoute = PlaylistCodeRouteImport.update({
  id: '/$playlistCode',
  path: '/$playlistCode',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfessorIndexRoute = ProfessorIndexRouteImport.update({
  id: '/professor/',
  path: '/professor/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfessorPlaylistIdRoute = ProfessorPlaylistIdRouteImport.update({
  id: '/professor/$playlistId',
  path: '/professor/$playlistId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$playlistCode': typeof PlaylistCodeRoute
  '/professor/$playlistId': typeof ProfessorPlaylistIdRoute
  '/admin': typeof AdminIndexRoute
  '/professor': typeof ProfessorIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$playlistCode': typeof PlaylistCodeRoute
  '/professor/$playlistId': typeof ProfessorPlaylistIdRoute
  '/admin': typeof AdminIndexRoute
  '/professor': typeof ProfessorIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$playlistCode': typeof PlaylistCodeRoute
  '/professor/$playlistId': typeof ProfessorPlaylistIdRoute
  '/admin/': typeof AdminIndexRoute
  '/professor/': typeof ProfessorIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$playlistCode'
    | '/professor/$playlistId'
    | '/admin'
    | '/professor'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$playlistCode'
    | '/professor/$playlistId'
    | '/admin'
    | '/professor'
  id:
    | '__root__'
    | '/'
    | '/$playlistCode'
    | '/professor/$playlistId'
    | '/admin/'
    | '/professor/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlaylistCodeRoute: typeof PlaylistCodeRoute
  ProfessorPlaylistIdRoute: typeof ProfessorPlaylistIdRoute
  AdminIndexRoute: typeof AdminIndexRoute
  ProfessorIndexRoute: typeof ProfessorIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$playlistCode': {
      id: '/$playlistCode'
      path: '/$playlistCode'
      fullPath: '/$playlistCode'
      preLoaderRoute: typeof PlaylistCodeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/professor/': {
      id: '/professor/'
      path: '/professor'
      fullPath: '/professor'
      preLoaderRoute: typeof ProfessorIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/professor/$playlistId': {
      id: '/professor/$playlistId'
      path: '/professor/$playlistId'
      fullPath: '/professor/$playlistId'
      preLoaderRoute: typeof ProfessorPlaylistIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlaylistCodeRoute: PlaylistCodeRoute,
  ProfessorPlaylistIdRoute: ProfessorPlaylistIdRoute,
  AdminIndexRoute: AdminIndexRoute,
  ProfessorIndexRoute: ProfessorIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
